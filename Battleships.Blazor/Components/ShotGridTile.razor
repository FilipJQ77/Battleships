@using Battleships.Core.Entities
@using Battleships.Core.Services.Interfaces
@inject IGame Game
@inject IDialogService DialogService

<MudButton Variant="Variant" Size="Size.Medium" Color="Color" Style="min-width: 3em; width: 3em; height: 3em;" OnClick="Shoot">
    <MudText Align="Align.Center">@Text</MudText>
</MudButton>

@code {

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public ShotTileState[,] ShotTiles { get; set; }

    private string Alphabet => "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    private string Text => $"{Alphabet[X]}{Y + 1}";

    private void Shoot()
    {
        try
        {
            Game.Shoot(1, new Tile(X, Y));
            if (Game.Player2.Lost)
            {
                DialogService.ShowMessageBox("Congratulations!", "You win!");
            }

            var random = new Random();

    // AI turn
            Game.Shoot(2, new Tile(random.Next(0, Game.BoardSize), random.Next(0, Game.BoardSize)));
            if (Game.Player1.Lost)
            {
                DialogService.ShowMessageBox("You lost!", "Better luck next time!");
            }
        }
        catch (Exception e)
        {
            DialogService.ShowMessageBox("Exception", e.Message);
        }
    }

    private Color Color => ShotTiles[X, Y] switch{
        ShotTileState.Empty => Color.Primary,
        ShotTileState.Shooting => Color.Info,
        ShotTileState.Hit => Color.Success,
        ShotTileState.Miss => Color.Dark
        };

    private Variant Variant => ShotTiles[X, Y] switch{
        ShotTileState.Empty => Variant.Outlined,
        ShotTileState.Shooting => Variant.Filled,
        ShotTileState.Hit => Variant.Filled,
        ShotTileState.Miss => Variant.Filled,
        };
}
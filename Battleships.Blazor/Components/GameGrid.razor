@using Battleships.Core.Services.Interfaces
@inject IDialogService DialogService
@inject IGame Game

<MudStack Row="true" Spacing="10">
    <MudStack Spacing="1">
        <MudText>Player ships:</MudText>
        @for (var x = 0; x < Game.BoardSize; x++)
        {
            var firstCoordinate = x;
            <MudStack Row="true" Spacing="1">
                @for (var y = 0; y < Game.BoardSize; y++)
                {
                    var secondCoordinate = y;
                    <ShipGridTile X="firstCoordinate" Y="secondCoordinate"
                                  ShipTiles="@Game.Player1.PlayerGameBoard.ShipTilesStates"/>
                }
            </MudStack>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateShips">
            <MudText>Create ships</MudText>
        </MudButton>
    </MudStack>

    <MudStack Spacing="1">
        <MudText>Player shots:</MudText>
        @for (var x = 0; x < Game.BoardSize; x++)
        {
            var firstCoordinate = x;
            <MudStack Row="true" Spacing="1">
                @for (var y = 0; y < Game.BoardSize; y++)
                {
                    var secondCoordinate = y;
                    <ShotGridTile X="firstCoordinate" Y="secondCoordinate" ShotTiles="@Game.Player1.PlayerGameBoard.ShotTilesStates" Refresh="@Refresh"/>
                }
            </MudStack>
        }
    </MudStack>
</MudStack>

@code
{
    void CreateShips()
    {
        try
        {
            Game.Player1.PlayerGameBoard.PlaceShips(Game.PossibleShips);
        }
        catch (Exception e)
        {
            DialogService.ShowMessageBox("Exception", e.Message);
        }
    }

    void Refresh()
    {
        StateHasChanged();
    }
}